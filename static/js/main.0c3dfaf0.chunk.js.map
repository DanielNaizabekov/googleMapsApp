{"version":3,"sources":["api/urls.js","components/Map/Map.js","components/MapSearchInput/MapSearchInput.js","views/MapPage/MapPage.js","App.js","serviceWorker.js","index.js"],"names":["MAP_URL","Map","compose","withProps","googleMapURL","containerElement","className","mapElement","loadingElement","lifecycle","componentWillMount","refs","markers","this","setState","openingMarkerId","onMarkerMounted","ref","index","getMarkerCoords","lat","getPosition","lng","onOpenBox","id","onCloseBox","withScriptjs","withGoogleMap","props","defaultZoom","center","map","marker","draggable","position","coords","onPositionChanged","onMarkerPositionChanged","onDragEnd","onMarkerDragEnd","onClick","event","key","onCloseClick","address","path","geodesic","options","strokeColor","strokeOpacity","strokeWeight","MapSearchInput","input","initAutocomplete","emitPlaceChanged","persist","google","maps","places","Autocomplete","target","addListener","getPlaceResult","getPlace","geometry","location","alert","place","formatted_address","console","log","type","placeholder","onPlaceChanged","MapPage","geocoder","useState","setMarkers","mapCenter","setMapCenter","PlacesItemHandle","SortableHandle","PlacesItem","SortableElement","value","removingMarker","newMarkers","removingMarkerIndex","findIndex","splice","removeMarker","PlacesList","SortableContainer","items","newMarker","Date","now","toString","length","onSortEnd","oldIndex","newIndex","movingMarker","useDragHandle","helperClass","prevMarkers","Geocoder","geocode","results","status","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c3dfaf0.chunk.js","sourcesContent":["const API_KEY = 'AIzaSyD30y0pPfIYSZlD_9a3ts0_QmNqDWeEFt0';\r\nexport const MAP_URL = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places`;","import React from 'react';\r\nimport './Map.css';\r\nimport { compose, withProps, lifecycle } from 'recompose';\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker, Polyline, InfoWindow } from 'react-google-maps';\r\nimport { MAP_URL } from '../../api/urls';\r\n\r\nconst Map = compose(\r\n  withProps({\r\n    googleMapURL: MAP_URL,\r\n    containerElement: <div className=\"container-element\" />,\r\n    mapElement: <div className=\"map-element\" />,\r\n    loadingElement: <div className=\"loading-element\" />,\r\n  }),\r\n  lifecycle({\r\n    componentWillMount() {\r\n      const refs = {\r\n        markers: [],\r\n      };\r\n\r\n      this.setState({\r\n        openingMarkerId: null,\r\n        onMarkerMounted: (ref, index) => refs.markers[index] = ref,\r\n        getMarkerCoords: index => ({\r\n          lat: refs.markers[index].getPosition().lat(),\r\n          lng: refs.markers[index].getPosition().lng(),\r\n        }),\r\n        onOpenBox: id => this.setState({ openingMarkerId: id }),\r\n        onCloseBox: () => this.setState({ openingMarkerId: null }),\r\n      });\r\n    },\r\n  }),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(props => {\r\n  return (\r\n    <GoogleMap\r\n      defaultZoom={8}\r\n      center={props.center}\r\n    >\r\n      {props.markers.map((marker, index) => (\r\n        <Marker\r\n          draggable={true}\r\n          position={marker.coords}\r\n          onPositionChanged={() => props.onMarkerPositionChanged(index, props.getMarkerCoords(index))}\r\n          onDragEnd={() => props.onMarkerDragEnd(index, props.getMarkerCoords(index))}\r\n          onClick={() => props.onOpenBox(marker.id)}\r\n          ref={event => props.onMarkerMounted(event, index)}\r\n          key={marker.id}\r\n        >\r\n          {props.openingMarkerId === marker.id &&\r\n            <InfoWindow onCloseClick={props.onCloseBox}>\r\n              <div>{marker.address}</div>\r\n            </InfoWindow>}\r\n        </Marker>\r\n      ))}\r\n      <Polyline\r\n        path={props.markers.map(marker => marker.coords)}\r\n        geodesic={true}\r\n        options={{\r\n          strokeColor: \"#ff2527\",\r\n          strokeOpacity: 0.75,\r\n          strokeWeight: 2,\r\n        }}\r\n      />\r\n    </GoogleMap>\r\n  );\r\n});\r\n\r\nexport default Map;","import React from 'react';\r\nimport './MapSearchInput.css';\r\nimport { compose, lifecycle } from 'recompose';\r\n\r\nconst MapSearchInput = compose(\r\n  lifecycle({\r\n    componentWillMount() {\r\n      let input;\r\n\r\n      this.setState({\r\n        initAutocomplete: (event, emitPlaceChanged) => {\r\n          try {\r\n            if(input) return;\r\n            event.persist();\r\n            // eslint-disable-next-line no-undef\r\n            input = new google.maps.places.Autocomplete(event.target);\r\n            input.addListener('place_changed', () => {\r\n              const getPlaceResult = input.getPlace();\r\n              if(!getPlaceResult?.geometry?.location) return alert('Place not found !');\r\n              \r\n              const place = {\r\n                address: getPlaceResult.formatted_address,\r\n                coords: {\r\n                  lat: getPlaceResult.geometry.location.lat(),\r\n                  lng: getPlaceResult.geometry.location.lng(),\r\n                },\r\n              };\r\n              emitPlaceChanged(place);\r\n            });\r\n          } catch {\r\n            console.log('Google maps is loading');\r\n          }\r\n        },\r\n      });\r\n    },\r\n  })\r\n)(props => {\r\n  return (\r\n    <div className=\"map-search-wrap\">\r\n      <input\r\n        className=\"map-search-input\"\r\n        type=\"text\"\r\n        placeholder=\"Search place\"\r\n        onClick={event => props.initAutocomplete(event, props.onPlaceChanged)}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default MapSearchInput;","import React, { useState } from 'react';\r\nimport './MapPage.css';\r\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\r\nimport Map from '../../components/Map/Map';\r\nimport MapSearchInput from '../../components/MapSearchInput/MapSearchInput';\r\n\r\nfunction MapPage() {\r\n  const [markers, setMarkers] = useState([]);\r\n  const BISHKEK = { lat: 42.882, lng: 74.582 };\r\n  const [mapCenter, setMapCenter] = useState(BISHKEK);\r\n\r\n  const addMarker = ({ address, coords }) => {\r\n    const newMarker = {\r\n      address,\r\n      coords,\r\n      id: Date.now().toString(),\r\n    };\r\n    setMapCenter(coords);\r\n    setMarkers(markers => [...markers, newMarker]);\r\n  };\r\n\r\n  const updateMarkerCoords = (index, coords) => {\r\n    const prevMarkers = [...markers];\r\n    prevMarkers[index].coords = coords;\r\n    setMarkers(prevMarkers);\r\n  };\r\n\r\n  let geocoder;\r\n  const updateMarkerAddress = (index, coords) => {\r\n    try {\r\n      // eslint-disable-next-line no-undef\r\n      !geocoder && ( geocoder = new google.maps.Geocoder() );\r\n  \r\n      geocoder.geocode({location: coords}, (results, status) => {\r\n          if (status === \"OK\" && results[0]) {\r\n              const prevMarkers = [...markers];\r\n              prevMarkers[index].address = results[0].formatted_address;\r\n              setMarkers(prevMarkers);\r\n          } else {\r\n            alert('Place not found');\r\n          }\r\n        }\r\n      );\r\n    } catch {\r\n      console.log('Google maps is loading');\r\n    }\r\n  };\r\n\r\n  const removeMarker = removingMarker => {\r\n    const newMarkers = [...markers];\r\n    const removingMarkerIndex = newMarkers.findIndex(marker => marker.id === removingMarker.id);\r\n    newMarkers.splice(removingMarkerIndex, 1);\r\n    setMarkers(newMarkers);\r\n  };\r\n  const moveMarker = ({ oldIndex, newIndex }) => {\r\n    let newMarkers = [...markers];\r\n    const movingMarker = newMarkers.splice(oldIndex, 1)[0];\r\n    newMarkers.splice(newIndex, 0, movingMarker);\r\n    setMarkers(newMarkers);\r\n  };\r\n  const PlacesItemHandle = SortableHandle( () => (\r\n    <div className=\"map-page-places-item-handle\" />\r\n  ) );\r\n  const PlacesItem = SortableElement( ({ value: marker }) => (\r\n    <li onClick={() => setMapCenter(marker.coords)} className=\"map-page-places-item\">\r\n      <span className=\"map-page-places-item-text\">{ marker.address }</span>\r\n      <PlacesItemHandle />\r\n      <div className=\"close-icon\" onClick={() => removeMarker(marker)} />\r\n    </li>\r\n  ) );\r\n  const PlacesList = SortableContainer( ({ items: markers }) => (\r\n    <ul className=\"map-page-places-list\">\r\n      {markers.map((marker, index) => (\r\n        <PlacesItem key={marker.id} index={index} value={marker}/>\r\n      ))}\r\n    </ul>\r\n  ) );\r\n\r\n  return (\r\n    <div className=\"map-page\">\r\n      <div className=\"map-page-left\">\r\n        <MapSearchInput onPlaceChanged={addMarker}/>\r\n\r\n        {markers.length\r\n          ? <PlacesList items={markers} onSortEnd={moveMarker} useDragHandle helperClass=\"active\"/>\r\n          : <h3 className=\"map-page-title\">No places</h3>}\r\n      </div>\r\n\r\n      <div className=\"map-page-right\">\r\n        <Map\r\n          center={mapCenter}\r\n          markers={markers}\r\n          onMarkerPositionChanged={updateMarkerCoords}\r\n          onMarkerDragEnd={updateMarkerAddress}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage;","import React from 'react';\nimport './App.css';\nimport MapPage from './views/MapPage/MapPage';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MapPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}